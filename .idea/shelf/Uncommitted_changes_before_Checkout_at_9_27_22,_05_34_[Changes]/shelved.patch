Index: test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># =============================================================================\n# Incremental Learning (CBCL) with Active Class Selection\n#\n# C McClurg, A Ayub, AR Wagner, S Rajtmajer\n# =============================================================================\n\nfrom sklearn.model_selection import train_test_split\nfrom data.functions import CBCL_WVS, CBCL_SVM, SVM_redistrict, SVM_simple\nfrom data.functions import update_centroids, aff_simple, aff_redistrict\nfrom data.get_incremental import incrementalData\nfrom datetime import datetime\nimport pandas as pd\nimport numpy as np\nimport random, pickle, time, os\nimport roboTHORController\nfrom ai2thor.controller import Controller\nimport matplotlib\nmatplotlib.use('TkAgg')\nimport matplotlib.pyplot as plt\n\n# TODO try iTHOR environments since there's 120 of them\n# TODO try smaller step-size\ndef trial(pack):\n    # unpack\n    pFileNo = pack[0]\n    pMod = pack[1]\n    pSeed = pack[2]\n    pDataName = pack[3]\n    pBiasType = pack[4]\n    pCBCL = pack[5]\n\n    # model parameters\n    pNetType = 'resnet34'  # CNN type\n    pNetFit = 'imagenet'  # dataset for CNN training\n    pDistMetric = 'euclidean'  # distance metric\n    pCentroidPred = 1  # no. centroids used in ranked voting scheme\n\n    # model random\n    np.random.seed(pSeed)\n    random.seed(pSeed)\n\n    # read visual features\n    readFile = './data/features/' + pDataName + '_' + pNetType + '_' + pNetFit + '_'\n    with open(readFile + 'train_features.data', 'rb') as fh:\n        trainFeatRGB = pickle.load(fh)\n    with open(readFile + 'test_features.data', 'rb') as fh:\n        testFeatRGB = pickle.load(fh)\n    with open(readFile + 'train_labels.data', 'rb') as fh:\n        trainLabelRGB = pickle.load(fh)\n    with open(readFile + 'test_labels.data', 'rb') as fh:\n        testLabelRGB = pickle.load(fh)\n\n    nClassTotal = len(set(testLabelRGB))\n    pShotStart = nClassTotal\n    if pDataName == 'grocery':\n        pDistLim = 13\n    elif pDataName == 'cifar':\n        pDistLim = 17\n    else:\n        pDistLim = 15\n\n    # model discretized data\n    incData = incrementalData(trainFeatRGB, trainLabelRGB, testFeatRGB, testLabelRGB, pSeed)\n    incData.incFormat(1)\n    incTrainFeatures = incData.incTrainFeatures\n    incTrainLabels = incData.incTrainLabels\n    incTestFeatures = incData.incTestFeatures\n    incTestLabels = incData.incTestLabels\n    nClassTotal = len(set(trainLabelRGB))\n\n    # shuffle by class\n    xTrainTot = [[] for i in range(nClassTotal)]\n    yTrainTot = [[] for i in range(nClassTotal)]\n    xTestTot = [[] for i in range(nClassTotal)]\n    yTestTot = [[] for i in range(nClassTotal)]\n\n    for iInc in range(len(incTrainLabels)):\n        xTrainKeep, xTrainDel, yTrainKeep, yTrainDel = train_test_split(incTrainFeatures[iInc], incTrainLabels[iInc],\n                                                                        random_state=pSeed, test_size=1)\n        xTestKeep, xTestDel, yTestKeep, yTestDel = train_test_split(incTestFeatures[iInc], incTestLabels[iInc],\n                                                                    random_state=pSeed, test_size=1)\n        iClass = yTrainKeep[0]\n        xTrainTot[iClass].extend(xTrainKeep)\n        yTrainTot[iClass].extend(yTrainKeep)\n        xTestTot[iClass].extend(xTestKeep)\n        yTestTot[iClass].extend(yTestKeep)\n    del xTrainKeep, yTrainKeep, xTestDel, yTestDel\n\n    # pull together all training and test instances for a dataset\n    for i in range(len(yTrainTot)):\n        xTrainTot[i].extend(xTestTot[i])\n        yTrainTot[i].extend(yTestTot[i])\n    del xTestTot, yTestTot\n\n    # prepare dataset for 90/10 train/test split\n    xTestTot = []\n    yTestTot = []\n    for iClass in range(nClassTotal):\n        xTrainTot[iClass], xTestTemp, yTrainTot[iClass], yTestTemp = train_test_split(xTrainTot[iClass],\n                                                                                      yTrainTot[iClass],\n                                                                                      random_state=pSeed,\n                                                                                      test_size=0.10)\n        xTestTot.extend(xTestTemp)\n        yTestTot.extend(yTestTemp)\n    del xTestTemp, yTestTemp\n\n    # initialize\n    centClass = [[] for x in range(nClassTotal)]  # centroids per class\n    centWtClass = [[] for x in range(nClassTotal)]  # centroid wt per class\n    nShotClass = [0 for x in range(nClassTotal)]  # image count per class\n    weightClass = [0 for x in range(nClassTotal)]  # weight per class\n    rAccClass = [0 for x in range(nClassTotal)]  # test accuracy per class\n    redClass = [0 for x in range(nClassTotal)]  # redistrict by class\n    xTrainBatch = []  # features for SVM case\n    yTrainBatch = []  # labels for SVM case\n    prevSplit = []  # only for redistricting\n\n    # initial examples\n    biasTemp = [random.randint(1, 10) for x in range(nClassTotal)]\n    biasClass = [int(np.rint(x / np.sum(biasTemp) * pShotStart)) for x in biasTemp]\n    needs_corrected = True\n    while needs_corrected:\n        if np.sum(biasClass) > pShotStart:\n            ix = random.randint(0, nClassTotal - 1)\n            if biasClass[ix] > 1: biasClass[ix] -= 1\n        elif np.sum(biasClass) < pShotStart:\n            ix = random.randint(0, nClassTotal - 1)\n            biasClass[ix] += 1\n        else:\n            needs_corrected = False\n\n    if ('SVM_' not in pBiasType):  # CBCL\n        xTrainCurr = []\n        yTrainCurr = []\n        for iClass in range(len(biasClass)):\n            for j in range(biasClass[iClass]):\n                if len(xTrainTot[iClass]) > 0:\n                    xTrainCurr.append(xTrainTot[iClass][0])\n                    yTrainCurr.extend([yTrainTot[iClass][0]])\n                    nShotClass[iClass] += 1\n                    del xTrainTot[iClass][0]\n                    del yTrainTot[iClass][0]\n                else:\n                    fReplace = True  # replace biased class with random\n                    while fReplace:\n                        randClass = random.randint(0, nClassTotal - 1)\n                        if len(xTrainTot[randClass]) > 0:\n                            xTrainCurr.append(xTrainTot[randClass][0])\n                            yTrainCurr.extend([yTrainTot[randClass][0]])\n                            nShotClass[randClass] += 1\n                            del xTrainTot[randClass][0]\n                            del yTrainTot[randClass][0]\n                            fReplace = False\n\n        # create centroids\n        pack = [xTrainCurr, yTrainCurr, centClass, centWtClass, pDistLim, pDistMetric]\n        [centClass, centWtClass] = update_centroids(pack)\n\n        # count centroids\n        nCentTotal = 0\n        for iClass in range(nClassTotal): nCentTotal += len(centClass[iClass])\n\n        # find weights for fighting bias\n        for iClass in range(nClassTotal):\n            if nShotClass[iClass] != 0:\n                weightClass[iClass] = np.divide(1, nShotClass[iClass])\n            else:\n                weightClass[iClass] = 0\n        weightClass = np.divide(weightClass, np.sum(weightClass))\n\n        # make new predictions\n        rAccClass0 = rAccClass.copy()\n        pack = [xTestTot, yTestTot, centClass, pCentroidPred, nClassTotal, weightClass, pDistMetric]\n        if pCBCL == 'WVS':\n            rAcc, rAccClass = CBCL_WVS(pack)\n        else:\n            rAcc, rAccClass = CBCL_SVM(pack)\n\n\n    else:  # SVM\n        xNew = []\n        yNew = []\n        nObsNew = 0\n        for iClass in range(len(biasClass)):\n            for j in range(biasClass[iClass]):\n                if len(yTrainTot[iClass]) > 0:\n                    xTrainObs = xTrainTot[iClass][0]\n                    yTrainObs = yTrainTot[iClass][0]\n                    xNew.append(xTrainTot[iClass][0])\n                    yNew.append(yTrainTot[iClass][0])\n                    xTrainBatch.append(xTrainObs)\n                    yTrainBatch.append(yTrainObs)\n                    del xTrainTot[iClass][0]\n                    del yTrainTot[iClass][0]\n                    nShotClass[yTrainObs] += 1\n                    nObsNew += 1\n                else:\n                    fReplace = True  # replace biased class with random\n                    while fReplace:\n                        randClass = random.randint(0, nClassTotal - 1)\n                        if len(xTrainTot[randClass]) > 0:\n                            xTrainObs = xTrainTot[randClass][0]\n                            yTrainObs = yTrainTot[randClass][0]\n                            xNew.append(xTrainTot[randClass][0])\n                            yNew.append(yTrainTot[randClass][0])\n                            xTrainBatch.append(xTrainObs)\n                            yTrainBatch.append(yTrainObs)\n                            del xTrainTot[randClass][0]\n                            del yTrainTot[randClass][0]\n                            nShotClass[yTrainObs] += 1\n                            nObsNew += 1\n                            fReplace = False\n\n        # learn and make predictions\n        if pBiasType == 'SVM_redistrict':\n            rAccClass0 = rAccClass.copy()\n            rAcc, rAccClass, prevSplit, redClass = SVM_redistrict(xTrainBatch, yTrainBatch,\n                                                                  xNew, yNew, xTestTot, yTestTot,\n                                                                  prevSplit, redClass, 'SVM', pSeed, 0)\n        else:\n            rAccClass0 = rAccClass.copy()\n            rAcc, rAccClass = SVM_simple(xTrainBatch, yTrainBatch, xTestTot, yTestTot, nClassTotal, 'SVM', pSeed)\n\n        yTrainCurr = yTrainBatch.copy()\n\n    del biasClass, biasTemp\n\n    # count observations\n    nObsTot = 0\n    nObsTotClass = [0 for i in range(nClassTotal)]\n    for i in range(len(yTrainCurr)):\n        nObsTot += 1\n        iClass = yTrainCurr[i]\n        nObsTotClass[iClass] += 1\n    # -----------------------------------------------------------------------------\n\n    # sim parameters\n    if pDataName == 'grocery':\n        pInc = 2\n    else:\n        pInc = 2\n\n    pRestock = True\n\n    # initialize sim variables\n    # does not apply to RoboTHOR\n    iPos = (0, 0, 0)\n    nObsTotClass = [0 for i in range(nClassTotal)]\n\n    # initialize output variables\n    final_obs = [nObsTot]\n    final_acc = [np.round(rAcc, 3)]\n    final_runTime = [0]\n    final_runDist = [0]\n    final_trainTime = [0]\n    runTime = 0\n    runDist = 0\n    trainTime = 0\n    pStatus = 'IP'\n    xLeftover = []\n    yLeftover = []\n    nObsLeftover = 0\n\n    collectionNum = 0\n    sceneNum = 0\n    sceneNames = []\n\n    for iInc in range(pInc):\n\n        if iInc % 10 == 0:\n            collectionNum = random.randint(0, 5)\n            sceneNum = 0\n        if iInc % 10 != 0:\n            sceneNum += 1\n\n        scenes = [[\"FloorPlan_Train1_1\", \"FloorPlan_Train2_1\", \"FloorPlan_Train3_1\", \"FloorPlan_Train4_1\",\n                   \"FloorPlan_Train5_1\", \"FloorPlan_Train6_1\", \"FloorPlan_Train7_1\", \"FloorPlan_Train8_1\",\n                   \"FloorPlan_Train9_1\", \"FloorPlan_Train10_1\"],\n                  [\"FloorPlan_Train1_2\", \"FloorPlan_Train2_2\", \"FloorPlan_Train3_2\", \"FloorPlan_Train4_2\",\n                   \"FloorPlan_Train5_2\", \"FloorPlan_Train6_2\", \"FloorPlan_Train7_2\", \"FloorPlan_Train8_2\",\n                   \"FloorPlan_Train9_2\", \"FloorPlan_Train10_2\"],\n                  [\"FloorPlan_Train1_3\", \"FloorPlan_Train2_3\", \"FloorPlan_Train3_3\", \"FloorPlan_Train4_3\",\n                   \"FloorPlan_Train5_3\", \"FloorPlan_Train6_3\", \"FloorPlan_Train7_3\", \"FloorPlan_Train8_3\",\n                   \"FloorPlan_Train9_3\", \"FloorPlan_Train10_3\"],\n                  [\"FloorPlan_Train1_4\", \"FloorPlan_Train2_4\", \"FloorPlan_Train3_4\", \"FloorPlan_Train4_4\",\n                   \"FloorPlan_Train5_4\", \"FloorPlan_Train6_4\", \"FloorPlan_Train7_4\", \"FloorPlan_Train8_4\",\n                   \"FloorPlan_Train9_4\", \"FloorPlan_Train10_4\"],\n                  [\"FloorPlan_Train1_5\", \"FloorPlan_Train2_5\", \"FloorPlan_Train3_5\", \"FloorPlan_Train4_5\",\n                   \"FloorPlan_Train5_1\", \"FloorPlan_Train6_5\", \"FloorPlan_Train7_5\", \"FloorPlan_Train8_5\",\n                   \"FloorPlan_Train9_5\", \"FloorPlan_Train10_5\"],\n                  [\"FloorPlan_Train11_1\", \"FloorPlan_Train11_2\", \"FloorPlan_Train11_3\", \"FloorPlan_Train11_4\",\n                   \"FloorPlan_Train11_5\", \"FloorPlan_Train12_1\", \"FloorPlan_Train12_2\", \"FloorPlan_Train12_3\",\n                   \"FloorPlan_Train12_4\", \"FloorPlan_Train12_5\"]\n                  ]\n\n        print(scenes[collectionNum][sceneNum])\n\n        controller = Controller(\n            agentMode=\"locobot\",\n            visibilityDistance=5.0,\n            scene=scenes[collectionNum][sceneNum],\n            gridSize=0.01,\n            movementGaussianSigma=0.01,\n            rotateStepDegrees=90,\n            rotateGaussianSigma=0.1,\n            renderInstanceSegmentation=True,\n            renderDepthImage=True,\n            width=300,\n            height=300,\n            fieldOfView=60\n        )\n        # topDown = topDownView.get_top_down_frame(controller)\n        # plt.imshow(topDown, interpolation='nearest')\n        # plt.show()\n\n        reachablePositions = controller.step(\n            action=\"GetReachablePositions\"\n        ).metadata[\"actionReturn\"]\n        for i in range(len(reachablePositions)):\n            reachablePositions[i] = [round(reachablePositions[i]['x'], 2), round(reachablePositions[i]['z'], 2)]\n        x = controller.last_event.metadata[\"agent\"][\"position\"][\"x\"]\n        z = controller.last_event.metadata[\"agent\"][\"position\"][\"z\"]\n        yaw = np.round(controller.last_event.metadata[\"agent\"][\"rotation\"][\"y\"], 0)\n        home_pos = [x, z, yaw]\n\n        print(str(iInc + 1) + ' of ' + str(pInc))\n        # count available\n        nTrainSimClass = [len(x) for x in xTrainTot]\n        nClassEmpty = 0\n        for iClass in range(len(nTrainSimClass)):\n            nTempClass = nTrainSimClass[iClass]\n            if nTempClass == 0: nClassEmpty += 1\n\n        # affinity for searching\n        if pBiasType == 'SVM_redistrict':\n            aClass = aff_redistrict(nShotClass, redClass, iInc, pMod)\n        elif pBiasType == 'SVM_uniform':\n            aClass = aff_simple('random', centWtClass, rAccClass, rAccClass0, pMod)\n        else:\n            aClass = aff_simple(pBiasType, centWtClass, rAccClass, rAccClass0, pMod)\n\n        # collect images in RoboTHOR simulation\n        pack = [pSeed, iPos, aClass, nObsTotClass, nTrainSimClass, 0, pRestock, pDataName, pFileNo, iInc]\n        # mcTicks is a leftover artifact from Malmo test. Its value is irrelevant.\n        iPos, mcTicks, iDist, iTime, nObsNewClass = roboTHORController.robo_thor_controller(pack, controller,\n                                                                                            reachablePositions,\n                                                                                            home_pos)\n        controller.stop()\n        controller.stop_unity()\n        runDist += iDist\n        runTime += iTime\n\n        # count the new images (assume pRestock True)\n        nTrainNewClass = nObsNewClass.copy()\n        nObsTotClass = np.array(nObsTotClass)\n        nObsTotClass = nObsTotClass + np.array(nTrainNewClass)\n        nObsTotClass = list(nObsTotClass)\n\n        if 'SVM_' not in pBiasType:  # CBCL\n\n            train_t0 = np.round(time.time(), 2)\n\n            # process images\n            xTrainCurr = []\n            yTrainCurr = []\n            nObsNew = 0\n            for iClass in range(len(nTrainNewClass)):\n                for j in range(nTrainNewClass[iClass]):\n                    if len(yTrainTot[iClass]) > 0:\n                        xTrainObs = xTrainTot[iClass][0]\n                        yTrainObs = yTrainTot[iClass][0]\n                        del xTrainTot[iClass][0]\n                        del yTrainTot[iClass][0]\n                        xTrainCurr.append(xTrainObs)\n                        yTrainCurr.append(yTrainObs)\n                        nShotClass[yTrainObs] += 1\n                        nObsNew += 1\n\n            # update centroids\n            pack = [xTrainCurr, yTrainCurr, centClass, centWtClass, pDistLim, pDistMetric]\n            [centClass, centWtClass] = update_centroids(pack)\n\n            # count total centroids\n            nCentTotal = 0\n            for iClass in range(nClassTotal): nCentTotal += len(centClass[iClass])\n\n            # find weights for fighting bias\n            for iClass in range(nClassTotal):\n                if nShotClass[iClass] != 0:\n                    weightClass[iClass] = np.divide(1, nShotClass[iClass])\n                else:\n                    weightClass[iClass] = 0\n            weightClass = np.divide(weightClass, np.sum(weightClass))\n\n            # make new predictions\n            rAccClass0 = rAccClass.copy()\n            pack = [xTestTot, yTestTot, centClass, pCentroidPred, nClassTotal, weightClass, pDistMetric]\n            if pCBCL == 'WVS':\n                rAcc, rAccClass = CBCL_WVS(pack)\n            else:\n                rAcc, rAccClass = CBCL_SVM(pack)\n\n            train_t1 = np.round(time.time(), 2)\n            addTime = (train_t1 - train_t0)\n            trainTime += addTime\n\n        else:  # SVM\n\n            train_t0 = np.round(time.time(), 3)\n\n            # process images\n            xNew = xLeftover.copy()\n            yNew = yLeftover.copy()\n            nObsNew = nObsLeftover\n\n            for iClass in range(len(nTrainNewClass)):\n                for j in range(nTrainNewClass[iClass]):\n                    if len(yTrainTot[iClass]) > 0:\n                        xTrainObs = xTrainTot[iClass][0]\n                        yTrainObs = yTrainTot[iClass][0]\n                        xNew.append(xTrainObs)\n                        yNew.append(yTrainObs)\n                        xTrainBatch.append(xTrainObs)\n                        yTrainBatch.append(yTrainObs)\n                        del xTrainTot[iClass][0]\n                        del yTrainTot[iClass][0]\n                        nShotClass[yTrainObs] += 1\n                        nObsNew += 1\n\n            # learn and make predictions\n            if pBiasType == 'SVM_redistrict':\n\n                if nObsNew < 10 and nObsLeftover == 0:  # too few observations, save what you have and don't train\n                    xLeftover = xNew.copy()\n                    yLeftover = yNew.copy()\n                    nObsLeftover = nObsNew\n\n                elif nObsNew < 10 and nObsLeftover != 0:  # too few observations (again), save what you have and don't train\n                    xLeftover.append(xNew)\n                    yLeftover.extend(yNew)\n                    nObsLeftover += nObsNew\n\n                else:  # enough observations, train and test\n                    rAccClass0 = rAccClass.copy()\n                    rAcc, rAccClass, prevSplit, redClass = SVM_redistrict(xTrainBatch, yTrainBatch,\n                                                                          xNew, yNew, xTestTot, yTestTot,\n                                                                          prevSplit, redClass, 'SVM', pSeed, iInc + 1)\n                    xLeftover = []\n                    yLeftover = []\n                    nObsLeftover = 0\n\n            else:\n                rAccClass0 = rAccClass.copy()\n                rAcc, rAccClass = SVM_simple(xTrainBatch, yTrainBatch, xTestTot, yTestTot, nClassTotal, 'SVM', pSeed)\n\n            train_t1 = np.round(time.time(), 3)\n            addTime = (train_t1 - train_t0)\n            trainTime += addTime\n\n        # record results\n        if nObsLeftover == 0: nObsTot += nObsNew\n        final_obs.append(nObsTot)\n        final_acc.append(np.round(rAcc, 3))\n        final_runTime.append(np.round(runTime, 2))\n        final_runDist.append(runDist)\n        final_trainTime.append(np.round(trainTime, 2))\n\n        sceneNames.append(str(collectionNum) + \"_\" + str(sceneNum))\n        if iInc == (pInc - 1): pStatus = 'complete'\n        time.sleep(0.1)\n        return [pStatus, pFileNo, pMod, pSeed, pDataName, pBiasType, pCBCL, sceneNames, final_obs, final_acc, final_runTime,\n                  final_runDist, final_trainTime, aClass]\n\n    # -----------------------------------------------------------------------------\n\n\nif __name__ == \"__main__\":\n\n    # prepare pack for test\n    i = 0\n    testPack = []\n    for pMod in [1]:\n        for pSeed in range(10):\n            for pDataName in ['grocery', 'cifar']:\n                for pBiasType in ['classWt', 'random']:  # SVM_redistrict, SVM_uniform\n                    for pCBCL in ['WVS', 'SVM']:\n                        testPack.append([i, pMod, pSeed, pDataName, pBiasType, pCBCL])\n                        i += 1\n    totalResult = [[] for i in range(len(testPack))]\n\n    # create write path\n    now = datetime.now()\n    d0 = now.strftime('%m%d')\n    d1 = now.strftime('%Y-%m%d')\n    pNetType = 'resnet34'\n    FILENAME = './results/{}/{}_{}_malmotest.xlsx'.format(d0, d1, pNetType)\n    try:\n        os.mkdir('./results/{}'.format(d0))\n    except:\n        pass\n\n    for i in range(len(testPack)):\n        singleResult = trial(testPack[i])\n        ix = singleResult[1]\n        totalResult[ix] = singleResult\n        df = pd.DataFrame(totalResult,\n                          columns=['status', 'no.', 'mod', 'seed', 'data', 'bias', 'learner', 'sceneName', 'obsInc',\n                                   'accInc', 'runTimeInc',\n                                   'runDistInc', 'trainTimeInc', 'aClass'])\n        df.to_excel(FILENAME)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test.py b/test.py
--- a/test.py	(revision 4b2e3f49f8b0fc0657569e3400b8bac466e8c930)
+++ b/test.py	(date 1664271139127)
@@ -236,9 +236,9 @@
 
     # sim parameters
     if pDataName == 'grocery':
-        pInc = 2
+        pInc = 1
     else:
-        pInc = 2
+        pInc = 1
 
     pRestock = True
 
@@ -499,12 +499,17 @@
     except:
         pass
 
-    for i in range(len(testPack)):
-        singleResult = trial(testPack[i])
-        ix = singleResult[1]
-        totalResult[ix] = singleResult
-        df = pd.DataFrame(totalResult,
-                          columns=['status', 'no.', 'mod', 'seed', 'data', 'bias', 'learner', 'sceneName', 'obsInc',
-                                   'accInc', 'runTimeInc',
-                                   'runDistInc', 'trainTimeInc', 'aClass'])
-        df.to_excel(FILENAME)
\ No newline at end of file
+    for i in range(int(len(testPack)/10)):
+        for j in range(0, 11, 1):
+            if i != 0 and j == 0:
+                break
+            else:
+                singleResult = trial(testPack[j * i + j])
+                ix = singleResult[1]
+                totalResult[ix] = singleResult
+                df = pd.DataFrame(totalResult,
+                                  columns=['status', 'no.', 'mod', 'seed', 'data', 'bias', 'learner', 'sceneName',
+                                           'obsInc',
+                                           'accInc', 'runTimeInc',
+                                           'runDistInc', 'trainTimeInc', 'aClass'])
+                df.to_excel(FILENAME)
\ No newline at end of file
Index: roboTHORController.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import time\nfrom matplotlib import pyplot as plt\nimport pandas as pd\nimport random\nimport conToObs\nimport obsToPath\nimport pathToNav\n\n# Function to run iterations of the experiment in the RoboTHOR environment\ndef robo_thor_controller(pack, controller, reachablePositions, home_pos):\n    iTime = 30\n    iDist = 0\n    start_time = time.time()\n    nObsNewClass = [0 for i in range(len(pack[3]))]\n    moveHist = []\n    path1 = [] # previous path\n    path2 = [] # current path\n\n    if pack[7] == 'grocery':\n        xTrainWeights = [-20 for i in range(81)]\n    elif pack[7] == 'cifar':\n        xTrainWeights = [-20 for i in range(100)]\n    else:\n        print(\"pDataName not recognized.\")\n    homeFlag = 0\n    while True:\n        # Time check\n        current_time = time.time()\n        elapsed_time = current_time - start_time\n        if elapsed_time > iTime:\n            print(\"Finished iterating in: \" + str(int(elapsed_time)) + \" seconds\")\n            break\n\n        # position = [controller.last_event.metadata[\"agent\"][\"position\"]['x'],\n        #             controller.last_event.metadata[\"agent\"][\"position\"]['z'],\n        #             controller.last_event.metadata[\"agent\"][\"rotation\"][\"y\"]]\n\n        # Looking around\n        controller, step, blockMatrix, objects = conToObs.con_to_obs(controller)\n        # Creating potential field and getting path\n        controller, path, homeFlag, obs, trainClass = obsToPath.obs_to_path(controller, blockMatrix, home_pos,\n                                                                           xTrainWeights, (0, 0), homeFlag,\n                                                                           pack[7], moveHist, reachablePositions)\n        step = 0.1 # Overriding step-size as a test. TODO Check if this makes a difference (no test run as of 22:08,\n        # TODO 26/09)\n        for i in range(len(xTrainWeights)):\n            if trainClass == i:\n                nObsNewClass[i] += 1\n                break\n\n        # Randomizing the next step if previous path is the same as the new path\n        print(\"Randomizing the next step if previous path is the same as the new path\")\n        path1 = path2\n        path2 = path\n        if path2 == path1:\n            # Same two paths in a row detected...randomizing the next step.\n            randDir = random.randint(0,4)\n            if randDir == 0:\n                controller.step(\n                    action=\"MoveAhead\",\n                    moveMagnitude=step*5\n                )\n            elif randDir == 1:\n                controller.step(\n                    action=\"RotateLeft\",\n                    degrees=90\n                )\n                controller.step(\n                    action=\"MoveAhead\",\n                    moveMagnitude=step*5\n                )\n            elif randDir == 2:\n                controller.step(\n                    action=\"RotateLeft\",\n                    degrees=180\n                )\n                controller.step(\n                    action=\"MoveAhead\",\n                    moveMagnitude=step*5\n                )\n            elif randDir == 3:\n                controller.step(\n                    action=\"RotateLeft\",\n                    degrees=270\n                )\n                controller.step(\n                    action=\"MoveAhead\",\n                    moveMagnitude=step*5\n                )\n\n        # Moving the agent according to the potential field\n        controller = pathToNav.path_to_nav(controller, step, path, moveHist)\n        path = 0\n        # df1 = pd.DataFrame(moveHist)\n        # df1.to_excel(excel_writer=\"~/Desktop/temp/moveHist.xlsx\")\n        iDist = iDist + step\n\n    return [controller.last_event.metadata[\"agent\"][\"position\"]['x'],\n            controller.last_event.metadata[\"agent\"][\"position\"]['y'],\n            controller.last_event.metadata[\"agent\"][\"position\"]['z']], iTime, iDist, iTime, nObsNewClass
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/roboTHORController.py b/roboTHORController.py
--- a/roboTHORController.py	(revision 4b2e3f49f8b0fc0657569e3400b8bac466e8c930)
+++ b/roboTHORController.py	(date 1664271139121)
@@ -8,7 +8,7 @@
 
 # Function to run iterations of the experiment in the RoboTHOR environment
 def robo_thor_controller(pack, controller, reachablePositions, home_pos):
-    iTime = 30
+    iTime = 5
     iDist = 0
     start_time = time.time()
     nObsNewClass = [0 for i in range(len(pack[3]))]
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"d6168bfd-edc1-450b-850a-b55485cba495\" name=\"Changes\" comment=\"Running on Mac Studio\">\n      <change afterPath=\"$PROJECT_DIR$/results/0927/2022-0927_resnet34_malmotest.xlsx\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Python Script\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectId\" id=\"2Ezi2LFbpcpKoaU2RPsC3zJk2bS\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\n    <property name=\"last_opened_file_path\" value=\"$USER_HOME$/.pyenv/versions/3.9.13/bin/python3\" />\n    <property name=\"settings.editor.selected.configurable\" value=\"com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable\" />\n  </component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/results\" />\n      <recent name=\"$PROJECT_DIR$/data\" />\n    </key>\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/results\" />\n      <recent name=\"$PROJECT_DIR$/small_town\" />\n      <recent name=\"$PROJECT_DIR$/data\" />\n      <recent name=\"$PROJECT_DIR$/data/features\" />\n    </key>\n  </component>\n  <component name=\"RunManager\" selected=\"Python.test\">\n    <configuration default=\"true\" type=\"PythonConfigurationType\" factoryName=\"Python\">\n      <module name=\"AI2THOR\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"SCRIPT_NAME\" value=\"\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"true\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"debug_controller\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\n      <module name=\"AI2THOR\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"/usr/bin/python3.8\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/debug_controller.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"plot\" type=\"PythonConfigurationType\" factoryName=\"Python\">\n      <module name=\"AI2THOR\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/plot.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <list>\n      <item itemvalue=\"Python.test\" />\n      <item itemvalue=\"Python.debug_controller\" />\n      <item itemvalue=\"Python.plot\" />\n    </list>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"d6168bfd-edc1-450b-850a-b55485cba495\" name=\"Changes\" comment=\"\" />\n      <created>1663604607592</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1663604607592</updated>\n      <workItem from=\"1663604610299\" duration=\"412000\" />\n      <workItem from=\"1664267227956\" duration=\"2439000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Added different rooms to the test\">\n      <created>1663822008164</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1663822008164</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Created objects file for Chris\">\n      <created>1663823658779</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1663823658779</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Added objects file\">\n      <created>1663823924621</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1663823924621</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"New mapping files\">\n      <created>1663988477334</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1663988477334</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"Plotting file is working.\">\n      <created>1664238277063</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1664238277063</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"Minor bugs fixed and comments added.\">\n      <created>1664241462415</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1664241462415</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"Fixed cifar output.\">\n      <created>1664243383457</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1664243383457</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"Outputting name of scene in results. Changed number of processes to 4 to speed up launch and reduce garbage incTime.\">\n      <created>1664244364972</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1664244364972</updated>\n    </task>\n    <task id=\"LOCAL-00009\" summary=\"TODO: Step-sze&#10;Changed output of sceneNames so it's more compact.\">\n      <created>1664244974105</created>\n      <option name=\"number\" value=\"00009\" />\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1664244974105</updated>\n    </task>\n    <task id=\"LOCAL-00010\" summary=\"Running on Mac Studio\">\n      <created>1664269671180</created>\n      <option name=\"number\" value=\"00010\" />\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1664269671180</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"11\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\n    <MESSAGE value=\"Added different rooms to the test\" />\n    <MESSAGE value=\"Created objects file for Chris\" />\n    <MESSAGE value=\"Added objects file\" />\n    <MESSAGE value=\"New mapping files\" />\n    <MESSAGE value=\"Plotting file is working.\" />\n    <MESSAGE value=\"Minor bugs fixed and comments added.\" />\n    <MESSAGE value=\"Fixed cifar output.\" />\n    <MESSAGE value=\"Outputting name of scene in results. Changed number of processes to 4 to speed up launch and reduce garbage incTime.\" />\n    <MESSAGE value=\"TODO: Step-sze&#10;Changed output of sceneNames so it's more compact.\" />\n    <MESSAGE value=\"Running on Mac Studio\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Running on Mac Studio\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\n          <url>file://$PROJECT_DIR$/plot.py</url>\n          <line>17</line>\n          <option name=\"timeStamp\" value=\"1\" />\n        </line-breakpoint>\n      </breakpoints>\n    </breakpoint-manager>\n  </component>\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\n    <SUITE FILE_PATH=\"coverage/AI2THOR$test.coverage\" NAME=\"test Coverage Results\" MODIFIED=\"1664268918808\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 4b2e3f49f8b0fc0657569e3400b8bac466e8c930)
+++ b/.idea/workspace.xml	(date 1664271234537)
@@ -2,7 +2,10 @@
 <project version="4">
   <component name="ChangeListManager">
     <list default="true" id="d6168bfd-edc1-450b-850a-b55485cba495" name="Changes" comment="Running on Mac Studio">
-      <change afterPath="$PROJECT_DIR$/results/0927/2022-0927_resnet34_malmotest.xlsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/results/0927/2022-0927_resnet34_malmotest.xlsx" beforeDir="false" afterPath="$PROJECT_DIR$/results/0927/2022-0927_resnet34_malmotest.xlsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/roboTHORController.py" beforeDir="false" afterPath="$PROJECT_DIR$/roboTHORController.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/test.py" beforeDir="false" afterPath="$PROJECT_DIR$/test.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -14,6 +17,17 @@
       <list>
         <option value="Python Script" />
       </list>
+    </option>
+  </component>
+  <component name="FlaskConsoleOptions" custom-start-script="import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\nApp: %s [%s]\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))">
+    <envs>
+      <env key="FLASK_APP" value="app" />
+    </envs>
+    <option name="myCustomStartScript" value="import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\nApp: %s [%s]\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))" />
+    <option name="myEnvs">
+      <map>
+        <entry key="FLASK_APP" value="app" />
+      </map>
     </option>
   </component>
   <component name="Git.Settings">
@@ -35,7 +49,7 @@
     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
     <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
     <property name="WebServerToolWindowFactoryState" value="false" />
-    <property name="last_opened_file_path" value="$USER_HOME$/.pyenv/versions/3.9.13/bin/python3" />
+    <property name="last_opened_file_path" value="$PROJECT_DIR$/bin/python" />
     <property name="settings.editor.selected.configurable" value="com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable" />
   </component>
   <component name="RecentsManager">
@@ -51,7 +65,7 @@
     </key>
   </component>
   <component name="RunManager" selected="Python.test">
-    <configuration default="true" type="PythonConfigurationType" factoryName="Python">
+    <configuration name="debug_controller" type="PythonConfigurationType" factoryName="Python" nameIsGenerated="true">
       <module name="AI2THOR" />
       <option name="INTERPRETER_OPTIONS" value="" />
       <option name="PARENT_ENVS" value="true" />
@@ -59,34 +73,34 @@
         <env name="PYTHONUNBUFFERED" value="1" />
       </envs>
       <option name="SDK_HOME" value="" />
-      <option name="WORKING_DIRECTORY" value="" />
-      <option name="IS_MODULE_SDK" value="false" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
+      <option name="IS_MODULE_SDK" value="true" />
       <option name="ADD_CONTENT_ROOTS" value="true" />
       <option name="ADD_SOURCE_ROOTS" value="true" />
       <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
-      <option name="SCRIPT_NAME" value="" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/debug_controller.py" />
       <option name="PARAMETERS" value="" />
-      <option name="SHOW_COMMAND_LINE" value="true" />
+      <option name="SHOW_COMMAND_LINE" value="false" />
       <option name="EMULATE_TERMINAL" value="false" />
       <option name="MODULE_MODE" value="false" />
       <option name="REDIRECT_INPUT" value="false" />
       <option name="INPUT_FILE" value="" />
       <method v="2" />
     </configuration>
-    <configuration name="debug_controller" type="PythonConfigurationType" factoryName="Python" nameIsGenerated="true">
+    <configuration name="plot" type="PythonConfigurationType" factoryName="Python">
       <module name="AI2THOR" />
       <option name="INTERPRETER_OPTIONS" value="" />
       <option name="PARENT_ENVS" value="true" />
       <envs>
         <env name="PYTHONUNBUFFERED" value="1" />
       </envs>
-      <option name="SDK_HOME" value="/usr/bin/python3.8" />
+      <option name="SDK_HOME" value="" />
       <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
-      <option name="IS_MODULE_SDK" value="false" />
+      <option name="IS_MODULE_SDK" value="true" />
       <option name="ADD_CONTENT_ROOTS" value="true" />
       <option name="ADD_SOURCE_ROOTS" value="true" />
       <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
-      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/debug_controller.py" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/plot.py" />
       <option name="PARAMETERS" value="" />
       <option name="SHOW_COMMAND_LINE" value="false" />
       <option name="EMULATE_TERMINAL" value="false" />
@@ -95,22 +109,19 @@
       <option name="INPUT_FILE" value="" />
       <method v="2" />
     </configuration>
-    <configuration name="plot" type="PythonConfigurationType" factoryName="Python">
+    <configuration name="test" type="PythonConfigurationType" factoryName="Python">
       <module name="AI2THOR" />
       <option name="INTERPRETER_OPTIONS" value="" />
       <option name="PARENT_ENVS" value="true" />
-      <envs>
-        <env name="PYTHONUNBUFFERED" value="1" />
-      </envs>
-      <option name="SDK_HOME" value="" />
+      <option name="SDK_HOME" value="$PROJECT_DIR$/bin/python" />
       <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
-      <option name="IS_MODULE_SDK" value="true" />
+      <option name="IS_MODULE_SDK" value="false" />
       <option name="ADD_CONTENT_ROOTS" value="true" />
       <option name="ADD_SOURCE_ROOTS" value="true" />
       <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
-      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/plot.py" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/test.py" />
       <option name="PARAMETERS" value="" />
-      <option name="SHOW_COMMAND_LINE" value="false" />
+      <option name="SHOW_COMMAND_LINE" value="true" />
       <option name="EMULATE_TERMINAL" value="false" />
       <option name="MODULE_MODE" value="false" />
       <option name="REDIRECT_INPUT" value="false" />
@@ -118,8 +129,8 @@
       <method v="2" />
     </configuration>
     <list>
+      <item itemvalue="Python.debug_controller" />
       <item itemvalue="Python.test" />
-      <item itemvalue="Python.debug_controller" />
       <item itemvalue="Python.plot" />
     </list>
   </component>
@@ -132,7 +143,7 @@
       <option name="presentableId" value="Default" />
       <updated>1663604607592</updated>
       <workItem from="1663604610299" duration="412000" />
-      <workItem from="1664267227956" duration="2439000" />
+      <workItem from="1664267227956" duration="3835000" />
     </task>
     <task id="LOCAL-00001" summary="Added different rooms to the test">
       <created>1663822008164</created>
Index: .idea/other.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"PySciProjectComponent\">\n    <option name=\"PY_SCI_VIEW\" value=\"true\" />\n    <option name=\"PY_SCI_VIEW_SUGGESTED\" value=\"true\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/other.xml b/.idea/other.xml
--- a/.idea/other.xml	(revision 4b2e3f49f8b0fc0657569e3400b8bac466e8c930)
+++ b/.idea/other.xml	(date 1664271234538)
@@ -1,7 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="PySciProjectComponent">
-    <option name="PY_SCI_VIEW" value="true" />
     <option name="PY_SCI_VIEW_SUGGESTED" value="true" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/AI2THOR.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"PYTHON_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\">\n    <content url=\"file://$MODULE_DIR$\" />\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.9 (AI2THOR)\" jdkType=\"Python SDK\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n  </component>\n  <component name=\"PyDocumentationSettings\">\n    <option name=\"format\" value=\"PLAIN\" />\n    <option name=\"myDocStringFormat\" value=\"Plain\" />\n    <option name=\"renderExternalDocumentation\" value=\"true\" />\n  </component>\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/AI2THOR.iml b/.idea/AI2THOR.iml
--- a/.idea/AI2THOR.iml	(revision 4b2e3f49f8b0fc0657569e3400b8bac466e8c930)
+++ b/.idea/AI2THOR.iml	(date 1664271234535)
@@ -8,6 +8,5 @@
   <component name="PyDocumentationSettings">
     <option name="format" value="PLAIN" />
     <option name="myDocStringFormat" value="Plain" />
-    <option name="renderExternalDocumentation" value="true" />
   </component>
 </module>
\ No newline at end of file
